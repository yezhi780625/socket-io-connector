{"version":3,"sources":["pages/Connector/index.jsx","App.jsx","Pwa.tsx","index.js"],"names":["messageCss","css","CONNECT_STATUS","buttonTextMap","map","Map","set","Connector","ioRef","useRef","input","useState","url","setUrl","connectStatus","setConnectStatus","messages","setMessages","appendMessage","useCallback","message","prev","concat","clearMessages","connect","e","current","value","disconnect","cancelConnect","buttonClickHandler","useMemo","useEffect","io","reconnectionDelayMax","on","console","log","connected","reason","error","Container","maxWidth","Box","display","flexDirection","gap","pt","pb","alignItems","TextField","className","label","placeholder","variant","size","inputRef","disabled","Button","onClick","get","height","width","Paper","sx","padding","background","minHeight","maxHeight","overflow","index","Typography","memo","MODE","injectGlobal","Component","App","prefersDarkMode","useMediaQuery","mode","setMode","switchMode","muiTheme","createTheme","palette","primary","main","match600","ThemeProvider","theme","CssBaseline","AppBar","Toolbar","flex","IconButton","color","contrastText","Pwa","update","setUpdate","refreshing","setRefreshing","showInstall","setShowInstall","installPromptEvent","installApp","prompt","userChoice","then","choice","outcome","window","addEventListener","event","preventDefault","register","process","ready","updatefound","cached","registered","updated","registration","waiting","postMessage","type","location","reload","offline","inspect","Snackbar","open","anchorOrigin","vertical","horizontal","action","PwaApp","props","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.328f6c81.chunk.js","sourcesContent":["import { css } from '@emotion/css';\nimport { Box, Button, Container, Paper, TextField, Typography } from '@material-ui/core';\nimport { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport io from 'socket.io-client';\n\nconst messageCss = css`\n  label: message;\n  &:nth-child(odd) {\n    color: black;\n  }\n`;\n\nconst CONNECT_STATUS = {\n  CONNECTED: 'connected',\n  CONNECTING: 'connecting',\n  DISCONNECTED: 'disconnected',\n};\n\nconst buttonTextMap = (() => {\n  const map = new Map();\n  map.set(CONNECT_STATUS.CONNECTED, 'disconnect');\n  map.set(CONNECT_STATUS.CONNECTING, 'cancel');\n  map.set(CONNECT_STATUS.DISCONNECTED, 'connect');\n  return map;\n})();\n\nconst Connector = () => {\n  const ioRef = useRef(null);\n  const input = useRef(null);\n  const [url, setUrl] = useState('');\n  // const [listenedEvents, setListenedEvents] = useState([]);\n  const [connectStatus, setConnectStatus] = useState(CONNECT_STATUS.DISCONNECTED);\n\n  const [messages, setMessages] = useState([]);\n\n  const appendMessage = useCallback((message) => {\n    setMessages((prev) => prev.concat(message));\n  }, []);\n\n  const clearMessages = useCallback(() => {\n    setMessages([]);\n  }, []);\n\n  const connect = useCallback((e) => {\n    setUrl(input.current.value);\n  }, []);\n\n  const disconnect = useCallback((e) => {\n    setUrl('');\n  }, []);\n\n  const cancelConnect = useCallback(() => {\n    setUrl('');\n    setConnectStatus(CONNECT_STATUS.DISCONNECTED);\n  }, []);\n\n  const buttonClickHandler = useMemo(() => {\n    const map = new Map();\n    map.set(CONNECT_STATUS.CONNECTED, disconnect);\n    map.set(CONNECT_STATUS.CONNECTING, cancelConnect);\n    map.set(CONNECT_STATUS.DISCONNECTED, connect);\n    return map;\n  }, [cancelConnect, connect, disconnect]);\n\n  useEffect(() => {\n    if (url) {\n      try {\n        setConnectStatus(CONNECT_STATUS.CONNECTING);\n        ioRef.current = io(url, {\n          reconnectionDelayMax: 10000,\n        });\n\n        ioRef.current.on('connect', () => {\n          console.log(ioRef.current.connected);\n          appendMessage(`Connect to ${url} successfully.`);\n          setConnectStatus(CONNECT_STATUS.CONNECTED);\n        });\n\n        ioRef.current.on('predictanomalydata', (...args) => {\n          console.log(...args);\n          appendMessage(args[0]);\n        });\n\n        // ioRef.current.on('test', appendMessage);\n\n        ioRef.current.on('disconnect', (reason) => {\n          if (reason === 'io client disconnect') {\n            appendMessage(`Disconnect to ${url} successfully.`);\n            setConnectStatus(CONNECT_STATUS.DISCONNECTED);\n          }\n          console.log(reason);\n          if (reason === 'io server disconnect') {\n            appendMessage('reconnecting to server.');\n            // the disconnection was initiated by the server, you need to reconnect manually\n            ioRef.current.connect();\n          }\n          // else the socket will automatically try to reconnect\n        });\n        return () => {\n          ioRef.current.disconnect();\n        };\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  }, [url, appendMessage]);\n\n  // useEffect(() => {}, [listenedEvents]);\n\n  console.log(ioRef.current);\n\n  return (\n    <Container maxWidth=\"md\">\n      <Box display=\"flex\" flexDirection=\"column\" gap={2} pt={2} pb={2}>\n        <Box display=\"flex\" gap={1} alignItems=\"center\">\n          <TextField\n            className={css`\n              flex: 1;\n            `}\n            label=\"address\"\n            placeholder=\"Socket.IO server address(includes protocol)\"\n            variant=\"filled\"\n            size=\"small\"\n            inputRef={input}\n            disabled={connectStatus === CONNECT_STATUS.CONNECTING}\n          />\n          <Button onClick={buttonClickHandler.get(connectStatus)}>\n            {buttonTextMap.get(connectStatus)}\n          </Button>\n        </Box>\n        <Box>\n          <Button onClick={clearMessages}>Clear Messages</Button>\n        </Box>\n        <Box height=\"100%\" width=\"100%\">\n          <Paper\n            sx={{\n              padding: '8px 16px',\n              background: '#939597',\n              height: '100%',\n              minHeight: '200px',\n              maxHeight: '400px',\n              overflow: 'auto',\n            }}\n          >\n            {messages.map((message, index) => (\n              <Typography key={`${index}: ${message}`} className={messageCss}>\n                {message}\n              </Typography>\n            ))}\n          </Paper>\n        </Box>\n      </Box>\n    </Container>\n  );\n};\nexport default memo(Connector);\n","import { injectGlobal } from '@emotion/css';\nimport {\n  AppBar,\n  Box,\n  createTheme,\n  CssBaseline,\n  IconButton,\n  ThemeProvider,\n  Toolbar,\n  Typography,\n  useMediaQuery,\n} from '@material-ui/core';\nimport LightIcon from '@material-ui/icons/Brightness4';\nimport DarkIcon from '@material-ui/icons/Brightness7';\nimport { memo, useCallback, useMemo, useState } from 'react';\nimport Connector from './pages/Connector';\n\nconst MODE = {\n  DARK: 'dark',\n  LIGHT: 'light',\n};\n\ninjectGlobal`\nhtml, body, #root {\n  width:100vw;\n  height:100vh;\n  position:relative\n}\n`;\n\nconst App = () => {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  const [mode, setMode] = useState(() => (prefersDarkMode ? MODE.DARK : MODE.LIGHT));\n\n  const switchMode = useCallback(() => {\n    setMode((prev) => (prev === MODE.DARK ? MODE.LIGHT : MODE.DARK));\n  }, []);\n\n  const muiTheme = useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode,\n          primary: {\n            main: '#3d91c2',\n          },\n        },\n      }),\n    [mode],\n  );\n\n  const match600 = useMediaQuery('(min-width: 600px)');\n\n  return (\n    <ThemeProvider theme={muiTheme}>\n      <CssBaseline />\n      <AppBar>\n        <Toolbar>\n          <Box flex={1}>\n            <Typography variant={match600 ? 'h4' : 'h6'}>Socket.IO Connector</Typography>\n          </Box>\n          <IconButton onClick={switchMode} sx={{ color: muiTheme.palette.primary.contrastText }}>\n            {mode === MODE.DARK ? <LightIcon /> : <DarkIcon />}\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <Box pt={match600 ? 8 : 6}>\n        <Connector />\n      </Box>\n    </ThemeProvider>\n  );\n};\n\nexport default memo(App);\n","import Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport React, { memo, useCallback, useEffect, useRef, useState } from 'react';\nimport { register } from 'register-service-worker';\nimport { inspect } from 'util';\n\ninterface BeforeInstallPromptEvent extends Event {\n  readonly platforms: string[];\n  readonly userChoice: Promise<{\n    outcome: 'accepted' | 'dismissed';\n    platform: string;\n  }>;\n  prompt(): Promise<void>;\n}\n\ndeclare global {\n  interface WindowEventMap {\n    beforeinstallprompt: BeforeInstallPromptEvent;\n  }\n}\n\nconst Pwa = () => {\n  const [update, setUpdate] = useState(null as null | (() => () => void));\n  const [refreshing, setRefreshing] = useState(false);\n  const [showInstall, setShowInstall] = useState(false);\n  const installPromptEvent = useRef<BeforeInstallPromptEvent | null>(null);\n\n  const installApp = useCallback(() => {\n    // Update the install UI to remove the install button\n    setShowInstall(false);\n    // Show the modal add to home screen dialog\n    installPromptEvent.current?.prompt?.();\n    // Wait for the user to respond to the prompt\n    installPromptEvent.current?.userChoice.then((choice) => {\n      if (choice.outcome === 'accepted') {\n        console.log('User accepted the A2HS prompt');\n      } else {\n        console.log('User dismissed the A2HS prompt');\n      }\n      // Clear the saved prompt since it can't be used again\n      installPromptEvent.current = null;\n    });\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('beforeinstallprompt', (event) => {\n      console.log('Before Install Prompt');\n      // Prevent Chrome <= 67 from automatically showing the prompt\n      event.preventDefault();\n      // Stash the event so it can be triggered later.\n      installPromptEvent.current = event;\n      // Update the install UI to notify the user app can be installed\n      setShowInstall(true);\n    });\n\n    if (process.env.NODE_ENV !== 'production') return;\n    register(`${process.env.PUBLIC_URL}service-worker.js`, {\n      ready: () => console.log('ready'),\n      updatefound: () => console.log('updatefound'),\n      cached: () => console.log('cached'),\n      registered: () => console.log('registered'),\n      updated(registration) {\n        setUpdate(() => () => {\n          setRefreshing(true);\n          if (registration.waiting) {\n            registration.waiting.postMessage({ type: 'SKIP_WAITING' });\n          }\n          registration.update().then(() => window.location.reload());\n        });\n      },\n      offline() {\n        // pushQuickMessage(\n        //   \"No internet connection found. App is running in offline mode.\"\n        // );\n      },\n      error(error) {\n        console.error('Error during service worker registration:', inspect(error));\n      },\n    });\n  }, []);\n  console.log(showInstall);\n  return (\n    <>\n      <Snackbar\n        open={update !== null}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n        message={'New content is available; please refresh.'}\n        action={\n          <Button {...(!update ? null : { onClick: update })} disabled={refreshing}>\n            refresh\n          </Button>\n        }\n      />\n      <Snackbar\n        open={showInstall}\n        message={'Add to home screen.'}\n        action={<Button onClick={installApp}>Install</Button>}\n      />\n    </>\n  );\n};\n\nexport default memo(Pwa);\n\nexport const withPWA =\n  <P extends object>(Component: React.ComponentType<P>) =>\n  (props: P) =>\n    (\n      <>\n        <Pwa />\n        <Component {...(props as P)} />\n      </>\n    );\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { withPWA } from './Pwa';\n\nconst PwaApp = withPWA(App);\n\nReactDOM.render(<PwaApp />, document.getElementById('root'));\n\n// register();\n"],"sourceRoot":""}